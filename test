#!/usr/bin/python
from sys import argv
import numpy as np
import sympy
import sympy as sp
import algorithms.one_dimentional as od
import algorithms.multi_dimentional as md
import algorithms.conditional as co

def default():
    print('...nothing')

def first_lab():
    f = lambda x: x**2+2*x-4
    a = -2
    b = 1

    print(f'fibonacci: {round(od.fibonacci(f, a, b), 2)}')
    print(f'dichotomy: {round(od.dichotomy(f, a, b), 2)}')
    print(f'golden section: {od.golden_section(f, a, b)}')


def second_lab():
    A = 10
    a = 3
    b = 2
    f = lambda x: A-(x[0]-a)*np.exp(a-x[0])-(x[1]-b)*np.exp(-(x[1]-b))
    symb_f = lambda x: A-(x[0]-a)*sympy.exp(a-x[0])-(x[1]-b)*sympy.exp(-(x[1]-b))
    
    x = np.random.normal(size=(2,))
    x = (0, 0)
    deltaX = np.array([0.8, 0.8])

    gs = round(md.gauss_seidel(f, x)['value'], 2)
    gd = round(md.gradient_descent(f, x)['value'], 2)
    print(f'gauss-seidel: {gs}')
    print(f'gradient_desent: {gd}')
    print(f'hook-jeeves: {md.Hook_Jeeves(f, symb_f, deltaX, x)}')
    print(f'rosenbrock: {md.Rosenbrock(x, f, symb_f)}')


def third_lab():
    x, y = sp.symbols('x y')
    # f = x**2 - y**2
    # g = x + y - 1

    f = x - y
    g = x**2 + y**2 - 1
    f1 = lambda x: x[0] - x[1]
    g1 = lambda x: x[0]**2 + x[1]**2 - 1

    vars = [x, y]
    
    min_f, min_x = co.Zoutendijk(f1, constraints= [g1], dim=2, Biggest_number_in_constr=5)

    f_3 = lambda x: 2*x[0]**2 + 2*x[1]**2 - 2*x[0]*x[1] - 4*x[0] - 6*x[1]
    initial_x = np.array([0, 1])
    H = np.array([])
    A_coeffs = np.array([
        [1, 1, 2],
        [1, 5, 5],
        [-1, 0, 0],
        [0, -1, 0]
    ])
    con1 = lambda x: x[0] + x[1] - 2 
    con2 = lambda x: x[0] + 5*x[1] - 5
    con3 = lambda x: -x[0]
    con4 = lambda x: -x[1]

    A = [con1, con2, con3, con4]

    optimal_x, value = co.Rosen(A, A_coeffs, H, f_3, initial_x)


    print('--------------------------------------')
    print(f'Rosen: optimal x = {optimal_x}, function value = {value}')
    print(f'Zoutendijk: function value = {min_f}, min_x = {min_x}')
    print(f'Lagrange multipliers: {co.lagrange_multipliers(f, [g], vars)}')


funcs = {
    '1': first_lab,
    '2': second_lab,
    '3': third_lab,
}

for key in argv[1:]:
    print(f'{key}.')
    funcs.get(key, default)()

